package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set FrameQuerySet

// FrameQuerySet is an queryset type for Frame
type FrameQuerySet struct {
	db *gorm.DB
}

// NewFrameQuerySet constructs new FrameQuerySet
func NewFrameQuerySet(db *gorm.DB) FrameQuerySet {
	return FrameQuerySet{
		db: db.Model(&Frame{}),
	}
}

func (qs FrameQuerySet) w(db *gorm.DB) FrameQuerySet {
	return NewFrameQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) All(ret *[]Frame) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Frame) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) CreatedAtEq(createdAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) CreatedAtGt(createdAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) CreatedAtGte(createdAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) CreatedAtLt(createdAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) CreatedAtLte(createdAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) CreatedAtNe(createdAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Frame) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) Delete() error {
	return qs.db.Delete(Frame{}).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) DescriptionEq(description string) FrameQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) DescriptionIn(description string, descriptionRest ...string) FrameQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) DescriptionNe(description string) FrameQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) DescriptionNotIn(description string, descriptionRest ...string) FrameQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) GetUpdater() FrameUpdater {
	return NewFrameUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) IDEq(ID uint) FrameQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) IDGt(ID uint) FrameQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) IDGte(ID uint) FrameQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) IDIn(ID uint, IDRest ...uint) FrameQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) IDLt(ID uint) FrameQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) IDLte(ID uint) FrameQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) IDNe(ID uint) FrameQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) IDNotIn(ID uint, IDRest ...uint) FrameQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) Limit(limit int) FrameQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) NameEq(name string) FrameQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) NameIn(name string, nameRest ...string) FrameQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) NameNe(name string) FrameQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) NameNotIn(name string, nameRest ...string) FrameQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs FrameQuerySet) One(ret *Frame) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) OrderAscByCreatedAt() FrameQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) OrderAscByID() FrameQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) OrderAscByUpdatedAt() FrameQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) OrderDescByCreatedAt() FrameQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) OrderDescByID() FrameQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) OrderDescByUpdatedAt() FrameQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u FrameUpdater) SetCreatedAt(createdAt time.Time) FrameUpdater {
	u.fields[string(FrameDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u FrameUpdater) SetDescription(description string) FrameUpdater {
	u.fields[string(FrameDBSchema.Description)] = description
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u FrameUpdater) SetID(ID uint) FrameUpdater {
	u.fields[string(FrameDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u FrameUpdater) SetName(name string) FrameUpdater {
	u.fields[string(FrameDBSchema.Name)] = name
	return u
}

// SetStartType is an autogenerated method
// nolint: dupl
func (u FrameUpdater) SetStartType(startType string) FrameUpdater {
	u.fields[string(FrameDBSchema.StartType)] = startType
	return u
}

// SetUID is an autogenerated method
// nolint: dupl
func (u FrameUpdater) SetUID(UID string) FrameUpdater {
	u.fields[string(FrameDBSchema.UID)] = UID
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u FrameUpdater) SetUpdatedAt(updatedAt time.Time) FrameUpdater {
	u.fields[string(FrameDBSchema.UpdatedAt)] = updatedAt
	return u
}

// StartTypeEq is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) StartTypeEq(startType string) FrameQuerySet {
	return qs.w(qs.db.Where("start_type = ?", startType))
}

// StartTypeIn is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) StartTypeIn(startType string, startTypeRest ...string) FrameQuerySet {
	iArgs := []interface{}{startType}
	for _, arg := range startTypeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("start_type IN (?)", iArgs))
}

// StartTypeNe is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) StartTypeNe(startType string) FrameQuerySet {
	return qs.w(qs.db.Where("start_type != ?", startType))
}

// StartTypeNotIn is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) StartTypeNotIn(startType string, startTypeRest ...string) FrameQuerySet {
	iArgs := []interface{}{startType}
	for _, arg := range startTypeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("start_type NOT IN (?)", iArgs))
}

// UIDEq is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) UIDEq(UID string) FrameQuerySet {
	return qs.w(qs.db.Where("uid = ?", UID))
}

// UIDIn is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) UIDIn(UID string, UIDRest ...string) FrameQuerySet {
	iArgs := []interface{}{UID}
	for _, arg := range UIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("uid IN (?)", iArgs))
}

// UIDNe is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) UIDNe(UID string) FrameQuerySet {
	return qs.w(qs.db.Where("uid != ?", UID))
}

// UIDNotIn is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) UIDNotIn(UID string, UIDRest ...string) FrameQuerySet {
	iArgs := []interface{}{UID}
	for _, arg := range UIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("uid NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u FrameUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u FrameUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) UpdatedAtEq(updatedAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) UpdatedAtGt(updatedAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) UpdatedAtGte(updatedAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) UpdatedAtLt(updatedAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) UpdatedAtLte(updatedAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs FrameQuerySet) UpdatedAtNe(updatedAt time.Time) FrameQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set FrameQuerySet

// ===== BEGIN of Frame modifiers

type frameDBSchemaField string

func (f frameDBSchemaField) String() string {
	return string(f)
}

// FrameDBSchema stores db field names of Frame
var FrameDBSchema = struct {
	ID          frameDBSchemaField
	CreatedAt   frameDBSchemaField
	UpdatedAt   frameDBSchemaField
	Name        frameDBSchemaField
	Description frameDBSchemaField
	UID         frameDBSchemaField
	StartType   frameDBSchemaField
}{

	ID:          frameDBSchemaField("id"),
	CreatedAt:   frameDBSchemaField("created_at"),
	UpdatedAt:   frameDBSchemaField("updated_at"),
	Name:        frameDBSchemaField("name"),
	Description: frameDBSchemaField("description"),
	UID:         frameDBSchemaField("uid"),
	StartType:   frameDBSchemaField("start_type"),
}

// Update updates Frame fields by primary key
func (o *Frame) Update(db *gorm.DB, fields ...frameDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"name":        o.Name,
		"description": o.Description,
		"uid":         o.UID,
		"start_type":  o.StartType,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Frame %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// FrameUpdater is an Frame updates manager
type FrameUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewFrameUpdater creates new Frame updater
func NewFrameUpdater(db *gorm.DB) FrameUpdater {
	return FrameUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Frame{}),
	}
}

// ===== END of Frame modifiers

// ===== END of all query sets
