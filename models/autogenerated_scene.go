package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set SceneQuerySet

// SceneQuerySet is an queryset type for Scene
type SceneQuerySet struct {
	db *gorm.DB
}

// NewSceneQuerySet constructs new SceneQuerySet
func NewSceneQuerySet(db *gorm.DB) SceneQuerySet {
	return SceneQuerySet{
		db: db.Model(&Scene{}),
	}
}

func (qs SceneQuerySet) w(db *gorm.DB) SceneQuerySet {
	return NewSceneQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) All(ret *[]Scene) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Scene) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) CreatedAtEq(createdAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) CreatedAtGt(createdAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) CreatedAtGte(createdAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) CreatedAtLt(createdAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) CreatedAtLte(createdAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) CreatedAtNe(createdAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Scene) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) Delete() error {
	return qs.db.Delete(Scene{}).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) DescriptionEq(description string) SceneQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) DescriptionIn(description string, descriptionRest ...string) SceneQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) DescriptionNe(description string) SceneQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) DescriptionNotIn(description string, descriptionRest ...string) SceneQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) GetUpdater() SceneUpdater {
	return NewSceneUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) IDEq(ID uint) SceneQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) IDGt(ID uint) SceneQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) IDGte(ID uint) SceneQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) IDIn(ID uint, IDRest ...uint) SceneQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) IDLt(ID uint) SceneQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) IDLte(ID uint) SceneQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) IDNe(ID uint) SceneQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) IDNotIn(ID uint, IDRest ...uint) SceneQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) Limit(limit int) SceneQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) NameEq(name string) SceneQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) NameIn(name string, nameRest ...string) SceneQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) NameNe(name string) SceneQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) NameNotIn(name string, nameRest ...string) SceneQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs SceneQuerySet) One(ret *Scene) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) OrderAscByCreatedAt() SceneQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) OrderAscByID() SceneQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByStoryID is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) OrderAscByStoryID() SceneQuerySet {
	return qs.w(qs.db.Order("story_id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) OrderAscByUpdatedAt() SceneQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) OrderDescByCreatedAt() SceneQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) OrderDescByID() SceneQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByStoryID is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) OrderDescByStoryID() SceneQuerySet {
	return qs.w(qs.db.Order("story_id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) OrderDescByUpdatedAt() SceneQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PreloadStory is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) PreloadStory() SceneQuerySet {
	return qs.w(qs.db.Preload("Story"))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u SceneUpdater) SetCreatedAt(createdAt time.Time) SceneUpdater {
	u.fields[string(SceneDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u SceneUpdater) SetDescription(description string) SceneUpdater {
	u.fields[string(SceneDBSchema.Description)] = description
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u SceneUpdater) SetID(ID uint) SceneUpdater {
	u.fields[string(SceneDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u SceneUpdater) SetName(name string) SceneUpdater {
	u.fields[string(SceneDBSchema.Name)] = name
	return u
}

// SetStory is an autogenerated method
// nolint: dupl
func (u SceneUpdater) SetStory(story Story) SceneUpdater {
	u.fields[string(SceneDBSchema.Story)] = story
	return u
}

// SetStoryID is an autogenerated method
// nolint: dupl
func (u SceneUpdater) SetStoryID(storyID uint) SceneUpdater {
	u.fields[string(SceneDBSchema.StoryID)] = storyID
	return u
}

// SetUID is an autogenerated method
// nolint: dupl
func (u SceneUpdater) SetUID(UID string) SceneUpdater {
	u.fields[string(SceneDBSchema.UID)] = UID
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u SceneUpdater) SetUpdatedAt(updatedAt time.Time) SceneUpdater {
	u.fields[string(SceneDBSchema.UpdatedAt)] = updatedAt
	return u
}

// StoryIDEq is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) StoryIDEq(storyID uint) SceneQuerySet {
	return qs.w(qs.db.Where("story_id = ?", storyID))
}

// StoryIDGt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) StoryIDGt(storyID uint) SceneQuerySet {
	return qs.w(qs.db.Where("story_id > ?", storyID))
}

// StoryIDGte is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) StoryIDGte(storyID uint) SceneQuerySet {
	return qs.w(qs.db.Where("story_id >= ?", storyID))
}

// StoryIDIn is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) StoryIDIn(storyID uint, storyIDRest ...uint) SceneQuerySet {
	iArgs := []interface{}{storyID}
	for _, arg := range storyIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("story_id IN (?)", iArgs))
}

// StoryIDLt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) StoryIDLt(storyID uint) SceneQuerySet {
	return qs.w(qs.db.Where("story_id < ?", storyID))
}

// StoryIDLte is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) StoryIDLte(storyID uint) SceneQuerySet {
	return qs.w(qs.db.Where("story_id <= ?", storyID))
}

// StoryIDNe is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) StoryIDNe(storyID uint) SceneQuerySet {
	return qs.w(qs.db.Where("story_id != ?", storyID))
}

// StoryIDNotIn is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) StoryIDNotIn(storyID uint, storyIDRest ...uint) SceneQuerySet {
	iArgs := []interface{}{storyID}
	for _, arg := range storyIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("story_id NOT IN (?)", iArgs))
}

// UIDEq is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) UIDEq(UID string) SceneQuerySet {
	return qs.w(qs.db.Where("uid = ?", UID))
}

// UIDIn is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) UIDIn(UID string, UIDRest ...string) SceneQuerySet {
	iArgs := []interface{}{UID}
	for _, arg := range UIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("uid IN (?)", iArgs))
}

// UIDNe is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) UIDNe(UID string) SceneQuerySet {
	return qs.w(qs.db.Where("uid != ?", UID))
}

// UIDNotIn is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) UIDNotIn(UID string, UIDRest ...string) SceneQuerySet {
	iArgs := []interface{}{UID}
	for _, arg := range UIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("uid NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u SceneUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u SceneUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) UpdatedAtEq(updatedAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) UpdatedAtGt(updatedAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) UpdatedAtGte(updatedAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) UpdatedAtLt(updatedAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) UpdatedAtLte(updatedAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs SceneQuerySet) UpdatedAtNe(updatedAt time.Time) SceneQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set SceneQuerySet

// ===== BEGIN of Scene modifiers

type sceneDBSchemaField string

func (f sceneDBSchemaField) String() string {
	return string(f)
}

// SceneDBSchema stores db field names of Scene
var SceneDBSchema = struct {
	ID          sceneDBSchemaField
	CreatedAt   sceneDBSchemaField
	UpdatedAt   sceneDBSchemaField
	Name        sceneDBSchemaField
	Description sceneDBSchemaField
	UID         sceneDBSchemaField
	StoryID     sceneDBSchemaField
	Story       sceneDBSchemaField
}{

	ID:          sceneDBSchemaField("id"),
	CreatedAt:   sceneDBSchemaField("created_at"),
	UpdatedAt:   sceneDBSchemaField("updated_at"),
	Name:        sceneDBSchemaField("name"),
	Description: sceneDBSchemaField("description"),
	UID:         sceneDBSchemaField("uid"),
	StoryID:     sceneDBSchemaField("story_id"),
	Story:       sceneDBSchemaField("story"),
}

// Update updates Scene fields by primary key
func (o *Scene) Update(db *gorm.DB, fields ...sceneDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"name":        o.Name,
		"description": o.Description,
		"uid":         o.UID,
		"story_id":    o.StoryID,
		"story":       o.Story,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Scene %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// SceneUpdater is an Scene updates manager
type SceneUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewSceneUpdater creates new Scene updater
func NewSceneUpdater(db *gorm.DB) SceneUpdater {
	return SceneUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Scene{}),
	}
}

// ===== END of Scene modifiers

// ===== END of all query sets
